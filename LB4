import numpy as np

m_sqr_arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) #Задаємо матрицю 3*3

print(m_sqr_arr)

m_sqr_mx = np.matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) #Ще один варіант як задати матрицю

print(m_sqr_mx)

#Побудуємо діагональ

m_sqr_mx = np.matrix('1 2 3; 4 5 6; 7 8 9')

diag = np.diag(m_sqr_mx)

print(diag)

#Побудуємо діагональну матрицю на базі полученої діагоналі

m_diag_np = np.diag(np.diag(m_sqr_mx))

print(m_diag_np)

#Транспонована матриця

= np.matrix('1 2 3; 4 5 6')

print('A=',a)

a_t = a.transpose()

print(a_t)

print(a.T) # ще один способ транспонування матриці

a = np.matrix('1 2; 3 4')

a_det = np.linalg.det(a) #Визначник матриці

print(format(a_det, '.9g'))

#Множення матриці на число

a = np.matrix('1 2 3; 4 5 6')

c = 3 * a

print(c)

#Додавання матриць

a = np.matrix('1 6 3; 8 2 7')

b = np.matrix('8 1 5; 6 9 12')

c = a + b

print(c)

#Добуток матриць

a = np.matrix('1 2 3; 4 5 6')

b = np.matrix('7 8; 9 1; 2 3')

c = a.dot(b)

print(c)

# Обернена матриця

A = np.matrix('1 -3; 2 5')

A_inv = np.linalg.inv(A)

print(A_inv)

#Ранг матриці

rank = np.linalg.matrix_rank(A)

print(rank)

#Матричний метод

A = np.matrix('3 -1 2; 1 4 -1; 2 3 1')

B = np.matrix('-4; 10; 8')

print('A=', A)

print('B=',B)

A_inv = np.linalg.inv(A)

print(A_inv)

X = A_inv.dot(B)

print('X=',X)

#Метод Крамера

a = np.matrix('3 -1 2; 1 4 -1; 2 3 1')

print('A=',a)

b = np.matrix('-4; 10; 8')

print('B=',b)

def kramer (a, b):

a_det = np.linalg.det(A)

print('Детермінант матриці = ', a_det)

#Зробити реревірку,що детермінант не дорівнює нулю

if (a_det != 0):

print ('Розв*язуємо систему')

x_m = np.matrix(a)

x_m[:, 0] = b # формування допоміжної матриці (1 ст. замінюємо на ст. b)

print('x_m=', x_m)

y_m = np.matrix(a) #2 ст. замінюємо на ст. b

y_m[:, 1] = b #2 c

print('y_m=',y_m)

z_m = np.matrix(a) #3 ст. замінюємо на ст. b

z_m[:, 2] = b

print('z_m=',z_m)

x = np.linalg.det(x_m) / a_det

y = np.linalg.det(y_m) / a_det

z = np.linalg.det(z_m) / a_det

print('X = ', round(x,5))

print('Y=', round(y,5))

print('Z=', round(z,5))

else:

print('Розв*язків немає')

kramer(a,b)

#Перевірка за допомогою методом solve() пакету linalg:

X = np.linalg.solve(a, b)
